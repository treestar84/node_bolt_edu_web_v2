// ÌïòÏù¥Î∏åÎ¶¨Îìú API ÌÇ§ Í¥ÄÎ¶¨: DB + ÌôòÍ≤ΩÎ≥ÄÏàò Ï°∞Ìï©
import { getApiKeys as getDbApiKeys, getApiKeyForAuth as getDbApiKeyForAuth, addApiKey as addDbApiKey, deleteApiKey as deleteDbApiKey } from './dbApiKeyManager.js';

// ÌôòÍ≤ΩÎ≥ÄÏàò Í∏∞Î∞ò Í∏∞Î≥∏ API ÌÇ§ (Ìï≠ÏÉÅ ÏÇ¨Ïö© Í∞ÄÎä•)
const ENV_API_KEYS = [
  {
    id: 'env-primary-key',
    key: process.env.VITE_API_KEY || '9d4d66b259384b44be5dccee037a4cc1',
    name: 'Primary Environment Key',
    description: 'Primary API key from environment variables',
    active: true,
    createdAt: '2025-08-03T00:00:00.000Z',
    lastUsed: null,
    usageCount: 0
  }
];

// Î™®Îì† API ÌÇ§ Ï°∞Ìöå (DB + ÌôòÍ≤ΩÎ≥ÄÏàò)
export const getApiKeys = async () => {
  try {
    // DBÏóêÏÑú ÌÇ§ Ï°∞Ìöå ÏãúÎèÑ
    const dbKeys = await getDbApiKeys();
    
    // ÌôòÍ≤ΩÎ≥ÄÏàò ÌÇ§Îì§ (Î≥¥ÏïàÏÉÅ Ïã§Ï†ú ÌÇ§Í∞íÏùÄ Ïà®ÍπÄ)
    const envKeys = ENV_API_KEYS.map(key => ({
      id: key.id,
      name: key.name,
      description: key.description,
      active: key.active,
      createdAt: key.createdAt,
      lastUsed: key.lastUsed,
      usageCount: key.usageCount,
      keyPreview: `${key.key.substring(0, 8)}...${key.key.substring(key.key.length - 4)}`,
      source: 'environment'
    }));

    // DB ÌÇ§Îì§Ïóê ÏÜåÏä§ ÌëúÏãú Ï∂îÍ∞Ä
    const dbKeysWithSource = dbKeys.map(key => ({
      ...key,
      source: 'database'
    }));

    console.log(`üîë Found ${envKeys.length} environment keys and ${dbKeys.length} database keys`);
    
    return [...envKeys, ...dbKeysWithSource];
  } catch (error) {
    console.error('‚ùå Error in hybrid getApiKeys:', error);
    // DB Ïã§Ìå®Ïãú ÌôòÍ≤ΩÎ≥ÄÏàò ÌÇ§Îßå Î∞òÌôò
    return ENV_API_KEYS.map(key => ({
      id: key.id,
      name: key.name,
      description: key.description,
      active: key.active,
      createdAt: key.createdAt,
      lastUsed: key.lastUsed,
      usageCount: key.usageCount,
      keyPreview: `${key.key.substring(0, 8)}...${key.key.substring(key.key.length - 4)}`,
      source: 'environment'
    }));
  }
};

// API ÌÇ§ Ïù∏Ï¶ù (DB + ÌôòÍ≤ΩÎ≥ÄÏàò Î™®Îëê ÌôïÏù∏)
export const getApiKeyForAuth = async (keyValue) => {
  try {
    if (!keyValue) return null;

    // 1. ÌôòÍ≤ΩÎ≥ÄÏàò ÌÇ§ Î®ºÏ†Ä ÌôïÏù∏
    const envKey = ENV_API_KEYS.find(key => key.key === keyValue && key.active);
    if (envKey) {
      console.log(`üîë Environment API key used: ${envKey.name}`);
      return {
        ...envKey,
        lastUsed: new Date().toISOString(),
        usageCount: envKey.usageCount + 1
      };
    }

    // 2. DB ÌÇ§ ÌôïÏù∏
    const dbKey = await getDbApiKeyForAuth(keyValue);
    if (dbKey) {
      console.log(`üîë Database API key used: ${dbKey.name}`);
      return dbKey;
    }

    return null;
  } catch (error) {
    console.error('‚ùå Error in hybrid getApiKeyForAuth:', error);
    return null;
  }
};

// ÏÉà API ÌÇ§ ÏÉùÏÑ± (DBÏóê Ï†ÄÏû• ÏãúÎèÑ, Ïã§Ìå®Ïãú Í≤ΩÍ≥†)
export const addApiKey = async (keyData) => {
  try {
    return await addDbApiKey(keyData);
  } catch (error) {
    console.error('‚ùå Failed to create API key in database:', error);
    throw new Error('Database API key creation failed. Please check Supabase configuration.');
  }
};

// API ÌÇ§ ÏÇ≠Ï†ú (ÌôòÍ≤ΩÎ≥ÄÏàò ÌÇ§Îäî ÏÇ≠Ï†ú Î∂àÍ∞Ä)
export const deleteApiKey = async (id) => {
  // ÌôòÍ≤ΩÎ≥ÄÏàò ÌÇ§Îäî ÏÇ≠Ï†ú Î∂àÍ∞Ä
  if (ENV_API_KEYS.some(key => key.id === id)) {
    console.log('‚ö†Ô∏è Cannot delete environment-based API key');
    return false;
  }

  try {
    return await deleteDbApiKey(id);
  } catch (error) {
    console.error('‚ùå Failed to delete API key from database:', error);
    return false;
  }
};

export default {
  getApiKeys,
  getApiKeyForAuth,
  addApiKey,
  deleteApiKey
};